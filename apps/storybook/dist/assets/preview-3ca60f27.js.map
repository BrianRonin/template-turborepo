{"version":3,"file":"preview-3ca60f27.js","sources":["../../../../packages/ui/src/styles/theme/dark.ts","../../../../packages/ui/src/styles/css/scrollbar/scrollbar_1.css.ts?used","../../../../packages/ui/src/styles/globals.css.tsx?used","../../../../packages/ui/.storybook/styles.css.tsx?used","../../../../packages/ui/.storybook/preview.tsx"],"sourcesContent":["import { makeHsl } from '../../utils/make-hsl'\nimport { colors, DefaultTheme } from './default'\n\nexport const dark_theme = {\n  ...DefaultTheme,\n  name: 'dark',\n  colors: {\n    ...DefaultTheme.colors,\n    black: makeHsl(colors.white),\n    white: makeHsl(colors.black),\n    bg: makeHsl({\n      ...colors.bg,\n      color: 'hsl(0, 0%, 100%)',\n      position: 'end',\n      orderLight: true,\n    }),\n    primary: makeHsl({\n      ...colors.primary,\n      inverse: true,\n    }),\n    secondary: makeHsl({\n      ...colors.secondary,\n      inverse: true,\n    }),\n    text: makeHsl({\n      ...colors.text,\n      inverse: true,\n      position: 'end',\n    }),\n    warning: makeHsl({\n      ...colors.warning,\n      inverse: true,\n    }),\n    info: makeHsl({\n      ...colors.info,\n      inverse: true,\n    }),\n    success: makeHsl({\n      ...colors.success,\n      inverse: true,\n    }),\n  },\n} as typeof DefaultTheme\n","import { css, Theme } from '@emotion/react'\r\n\r\nexport const CSS_ScrollBar = (\r\n  theme: Theme,\r\n) => css`\r\n  &::-webkit-scrollbar {\r\n    width: 8px;\r\n  }\r\n  &::-webkit-scrollbar-track {\r\n    opacity: 100%;\r\n  }\r\n  &::-webkit-scrollbar-thumb {\r\n    ${theme.name === 'default' && css`\r\n      background: ${theme.colors._black[3]};\r\n    `}\r\n    ${theme.name === 'dark' && css`\r\n      background: ${theme.colors._primary[0]};\r\n    `}\r\n    border-radius: 100vw;\r\n  }\r\n  @supports (scrollbar-color: red blue) {\r\n    scrollbar-color: #000000 ${theme.colors.primary[2]};\r\n    scrollbar-width: thin;\r\n  }\r\n`\r\n","import {\r\n  css,\r\n  Global,\r\n  useTheme,\r\n} from '@emotion/react'\r\nimport { CSS_ScrollBar } from './css/scrollbar/scrollbar_1.css'\r\nimport { CSS_notSelect } from './css/selection.css'\r\n\r\nconst GlobalStyles = () => {\r\n  const theme = useTheme()\r\n\r\n  return (\r\n    <Global\r\n      styles={css`\r\n        @import url('https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;1,100;1,300;1,400;1,500&display=swap');\r\n        * {\r\n          margin: 0;\r\n          padding: 0;\r\n          box-sizing: border-box;\r\n          ${CSS_notSelect(theme)}\r\n        }\r\n        html {\r\n          font-size: 62.5%;\r\n          font-family: 'Roboto', sans-serif;\r\n          scroll-behavior: smooth;\r\n          ${CSS_ScrollBar(theme)}\r\n        }\r\n        --body-bg: ${theme.colors.bg[0]};\r\n        body {\r\n          background: ${theme.colors.bg[0]};\r\n          font-size: ${theme.fonts.sizes[2]};\r\n          color: ${theme.colors.text[4]};\r\n        }\r\n        h1,\r\n        h2,\r\n        h3,\r\n        h4,\r\n        h5,\r\n        h6 {\r\n          font-weight: ${theme.fonts.weight.bold};\r\n          margin: ${theme.sizes[8]} 0;\r\n        }\r\n\r\n        @media ${theme.media.lLaptopM} {\r\n          button {\r\n            font-size: ${theme.fonts.sizes[1]} !important;\r\n          }\r\n          input {\r\n            font-size: ${theme.fonts.sizes[1]} !important;\r\n          }\r\n        }\r\n      `}\r\n    />\r\n  )\r\n}\r\n\r\nexport default GlobalStyles\r\n","import { css } from '@emotion/react'\r\nimport { Theme } from './types'\r\n\r\nconst base = (theme: Theme) => css`\r\n  color: ${theme.colors.text[4]} !important;\r\n  background: ${theme.colors.bg[0]} !important;\r\n  color: white !important;\r\n  background: black !important;\r\n`\r\nconst table = (theme: Theme) => css`\r\n  background: ${theme.colors.bg[0]} !important;\r\n  color: ${theme.colors.text[4]} !important;\r\n  border: none !important;\r\n  background: black;\r\n  color: white;\r\n  border: none;\r\n`\r\nconst tableType = (theme: Theme) => css`\r\n  background: ${theme.colors.bg[0]} !important;\r\n  color: ${theme.colors.info[2]} !important;\r\n  border: none !important;\r\n  font-size: 1em !important;\r\n`\r\nconst tableCode = (theme: Theme) => css`\r\n  background: ${theme.colors.bg[0]} !important;\r\n  color: ${theme.colors.primary[2]} !important;\r\n  border: none !important;\r\n  font-size: 1em !important;\r\n  background: black;\r\n  color: white;\r\n  border: none;\r\n  font-size: 1em;\r\n`\r\n\r\nexport const myCSS = (theme: Theme) => css`\r\n  .sbdocs-preview,\r\n  .docs-story {\r\n    background: ${theme.colors.bg[0]} !important;\r\n  }\r\n  .sbdocs-wrapper {\r\n    background: ${theme.colors.bg[0]} !important;\r\n  }\r\n  .sbdocs-h3,\r\n  .sbdocs-h2,\r\n  .sbdocs-h1 {\r\n    ${base(theme)}\r\n  }\r\n  .sbdocs-title {\r\n    ${base(theme)}\r\n  }\r\n  .sbdocs-title + div > p {\r\n    ${base(theme)}\r\n  }\r\n  .sbdocs-title + div > ul > li {\r\n    ${base(theme)}\r\n  }\r\n\r\n  //   ARG-TABLE    //\r\n  // Title\r\n  .docblock-argstable > thead > tr > th > span {\r\n    ${table(theme)}\r\n  }\r\n\r\n  // Body TD\r\n  .docblock-argstable > tbody > tr > td {\r\n    ${table(theme)}\r\n    font-size: 1.3em !important;\r\n  }\r\n\r\n  // Code\r\n  .docblock-argstable\r\n    > tbody\r\n    > tr\r\n    > td\r\n    > div\r\n    > span\r\n    > code {\r\n    ${tableCode(theme)}\r\n  }\r\n  .docblock-argstable\r\n    > tbody\r\n    > tr\r\n    > td\r\n    > div\r\n    > p\r\n    > code {\r\n    ${tableCode(theme)}\r\n  }\r\n\r\n  // Type\r\n  .docblock-argstable\r\n    > tbody\r\n    > tr\r\n    > td\r\n    > div\r\n    > div\r\n    > span {\r\n    ${tableType(theme)}\r\n  }\r\n\r\n  // Description\r\n  .docblock-argstable\r\n    > tbody\r\n    > tr\r\n    > td\r\n    > div\r\n    > span {\r\n    ${table(theme)}\r\n  }\r\n`\r\n\r\nexport const onlyStory = (theme: Theme) => css`\r\n  .sbdocs-preview,\r\n  .docs-story {\r\n    background: ${theme.colors.bg[0]};\r\n  }\r\n`\r\n","import React from 'react'\nimport {\n  ThemeProvider,\n  useTheme,\n} from '@emotion/react'\nimport { DefaultTheme } from '../src/styles/theme/default'\nimport { dark_theme } from '../src/styles/theme/dark'\nimport { PrismjsTheme } from './prismjs-theme'\nimport GlobalStyles from '../src/styles/globals.css'\nimport { onlyStory } from './styles.css'\n\nexport const globalTypes = {\n  theme: {\n    name: 'Theme',\n    description: 'Global theme for components',\n    toolbar: {\n      icon: 'paintbrush',\n      // Array of plain string values or MenuItem shape\n      items: [\n        {\n          value: 'light',\n          title: 'Light',\n          left: 'ðŸ”†',\n        },\n        {\n          value: 'dark',\n          title: 'Dark',\n          left: 'âšœ',\n        },\n      ],\n      // Change title based on selected value\n      dynamicTitle: true,\n    },\n  },\n}\n\nconst themes = {\n  light: DefaultTheme,\n  dark: dark_theme,\n}\n\nconst withGlobalStyle = (Story) => {\n  const theme = useTheme()\n\n  return (\n    <>\n      <style>{onlyStory(theme).styles}</style>\n      <GlobalStyles />\n      <Story />\n    </>\n  )\n}\n\nexport const withTheme = (Story, context) => {\n  const { theme } = context.globals\n  return (\n    <ThemeProvider\n      theme={themes[theme] || themes['dark']}\n    >\n      <Story />\n    </ThemeProvider>\n  )\n}\n// .storybook/preview.js\n\nexport const parameters = {\n  actions: { argTypesRegex: '^on[A-Z].*' },\n  controls: {\n    matchers: {\n      color: /(background|color)$/i,\n      date: /Date$/,\n    },\n  },\n  backgorunds: {\n    defualt: 'transparent',\n  },\n  layout: 'fullscreen',\n}\n\nexport const decorators = [\n  withGlobalStyle,\n  withTheme,\n]\n"],"names":["dark_theme","DefaultTheme","name","colors","black","makeHsl","white","bg","color","position","orderLight","primary","inverse","secondary","text","warning","info","success","CSS_ScrollBar","theme","css","_black","_primary","GlobalStyles","useTheme","jsx","Global","CSS_notSelect","fonts","sizes","weight","bold","media","lLaptopM","onlyStory","globalTypes","description","toolbar","icon","items","value","title","left","dynamicTitle","themes","light","dark","withGlobalStyle","Story","jsxs","Fragment","styles","withTheme","context","globals","ThemeProvider","parameters","actions","argTypesRegex","controls","matchers","date","backgorunds","defualt","layout","decorators"],"mappings":"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"}